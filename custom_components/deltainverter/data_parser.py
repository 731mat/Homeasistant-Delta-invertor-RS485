import struct

def parse_data(data):
    results = {}
    idx = 6  # Začátek dat za hlavičkou protokolu
    results['sap_part_number'] = data[idx:idx+11].decode('utf-8').strip()
    idx += 11
    results['sap_serial_number'] = data[idx:idx+18].decode('utf-8').strip()
    idx += 18
    results['sap_date_code'] = struct.unpack('>I', data[idx:idx+4])[0]
    idx += 4
    results['sap_revision'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['software_revision_ac_control'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['software_revision_dc_control'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['software_revision_display'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['software_revision_ens_control'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['solar_current_at_input_1'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['solar_voltage_at_input_1'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['solar_isolation_resistance_at_input_1'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['solar_current_at_input_2'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['solar_voltage_at_input_2'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['solar_isolation_resistance_at_input_2'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['ac_current'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['ac_voltage'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['ac_power'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['ac_frequency'] = struct.unpack('>H', data[idx:idx+2])[0] / 100
    idx += 2
    results['supplied_ac_energy'] = struct.unpack('>I', data[idx:idx+4])[0] / 1000
    idx += 4
    results['inverter_runtime'] = struct.unpack('>I', data[idx:idx+4])[0]
    idx += 4
    results['calculated_temperature_at_ntc_dc_side'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['solar_input_1_mov_resistance'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['solar_input_2_mov_resistance'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['calculated_temperature_at_ntc_ac_side'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['ac_voltage_ac_control'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['ac_frequency_ac_control'] = struct.unpack('>H', data[idx:idx+2])[0] / 100
    idx += 2
    results['dc_injection_current_ac_control'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['ac_voltage_ens_control'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['ac_frequency_ens_control'] = struct.unpack('>H', data[idx:idx+2])[0] / 100
    idx += 2
    results['dc_injection_current_ens_control'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['maximum_solar_1_input_current'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_solar_1_input_voltage'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_solar_1_input_power'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['minimum_isolation_resistance_solar_1'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['maximum_isolation_resistance_solar_1'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['maximum_solar_2_input_current'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_solar_2_input_voltage'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_solar_2_input_power'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['minimum_isolation_resistance_solar_2'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['maximum_isolation_resistance_solar_2'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['maximum_ac_current_of_today'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['minimum_ac_voltage_of_today'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_ac_voltage_of_today'] = struct.unpack('>H', data[idx:idx+2])[0] / 10
    idx += 2
    results['maximum_ac_power_of_today'] = struct.unpack('>H', data[idx:idx+2])[0]
    idx += 2
    results['minimum_ac_frequency_of_today'] = struct.unpack('>H', data[idx:idx+2])[0] / 100
    idx += 2
    results['maximum_ac_frequency_of_today'] = struct.unpack('>H', data[idx:idx+2])[0] / 100
    idx += 2
    results['supplied_ac_energy'] = struct.unpack('>I', data[idx:idx+4])[0] / 1000
    idx += 4
    results['inverter_runtime'] = struct.unpack('>I', data[idx:idx+4])[0]
    idx += 4
    results['global_alarm_status'] = data[idx]
    idx += 1
    results['status_dc_input'] = data[idx]
    idx += 1
    results['limits_dc_input'] = data[idx]
    idx += 1
    results['status_ac_output'] = data[idx]
    idx += 1
    results['limits_ac_output'] = data[idx]
    idx += 1
    results['isolation_warning_status'] = data[idx]
    idx += 1
    results['dc_hardware_failure'] = data[idx]
    idx += 1
    results['ac_hardware_failure'] = data[idx]
    idx += 1
    results['ens_hardware_failure'] = data[idx]
    idx += 1
    results['internal_bulk_failure'] = data[idx]
    idx += 1
    results['internal_communications_failure'] = data[idx]
    idx += 1
    results['ac_hardware_disturbance'] = data[idx]
    idx += 1
    return results
